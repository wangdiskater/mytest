plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
}



version "0.1"
group "mytest"

repositories {
    maven{ url 'http://mirrors.cloud.tencent.com/nexus/repository/maven-public/'}
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}


configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"

    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"

    compile "commons-beanutils:commons-beanutils:1.9.3"
    compile 'org.apache.commons:commons-lang3:3.9'
    // guava
    compile 'com.google.guava:guava:28.0-jre'

    // security
    compile "io.micronaut:micronaut-security-jwt"

    // redis
    compile 'io.micronaut.configuration:micronaut-redis-lettuce'

//    // 解密
    implementation 'org.bouncycastle:bcprov-jdk16:1.46'
    //DB
    compile "io.micronaut.data:micronaut-data-jdbc:$micronautDataVersion"
    compile 'mysql:mysql-connector-java:8.0.16'
    runtime("io.micronaut.configuration:micronaut-jdbc-hikari")
    // cglib
// https://mvnrepository.com/artifact/cglib/cglib
    implementation group: 'cglib', name: 'cglib', version: '3.3.0'

    //图片压缩
    // https://mvnrepository.com/artifact/net.coobird/thumbnailator
    implementation group: 'net.coobird', name: 'thumbnailator', version: '0.4.8'


    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "mytest.Application"
sourceCompatibility = 8
targetCompatibility = 8

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop,rapipdf.enabled=true,rapipdf.include-api-list=true,rapipdf.include-example=true'
}

shadowJar {
    mergeServiceFiles()
    archiveVersion = null
    archiveClassifier = null
    exclude '*-test.*'
    exclude '*-local.*'
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

